name: Monthly Python Script Runner

on:
  schedule:
    - cron: '0 2 1 * *'  # 2:00 AM UTC on the 1st of every month
  workflow_dispatch:

jobs:
  run-script:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check secrets are not empty and show lengths
        env:
          API_KEY: ${{ secrets.API_KEY }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        run: |
          check_var() {
            local name="$1"
            local value="${!name}"
            if [ -z "$value" ]; then
              echo "‚ùå $name is empty or not set."
              exit 1
            else
              echo "‚úÖ $name length: ${#value}"
            fi
          }

          check_var "API_KEY"
          check_var "SUPABASE_KEY"
          check_var "SUPABASE_URL"

      - name: DNS check for OpenAI API
        run: |
          echo "üîç Checking DNS resolution for api.openai.com"
          if dig +short api.openai.com | grep -qE '^[0-9.]+'; then
            echo "‚úÖ DNS resolution successful for api.openai.com"
          else
            echo "‚ùå DNS resolution failed for api.openai.com"
            exit 1
          fi

      - name: HTTP check for OpenAI API availability (with auth)
        env:
          API_KEY: ${{ secrets.API_KEY }}
        run: |
          echo "üåê Testing HTTPS connection to OpenAI API with authentication"
          if curl -s --head --fail -H "Authorization: Bearer $API_KEY" https://api.openai.com/v1/models > /dev/null; then
            echo "‚úÖ OpenAI API is reachable"
          else
            echo "‚ùå OpenAI API is not reachable (HTTP check failed)"
            exit 1
          fi

      - name: OpenAI Chat Completion Test
        env:
          API_KEY: ${{ secrets.API_KEY }}
        run: |
          echo "ü§ñ Testing OpenAI ChatCompletion API via SDK"
          # ensure the SDK is installed
          python -m pip install openai --quiet

          # write a small test script
          cat << EOF > test_openai.py
import openai
import sys

openai.api_key = "${API_KEY}"

try:
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": "Hello from GitHub Actions"}],
        max_tokens=10
    )
    print("‚úÖ ChatCompletion succeeded. Sample response:", response["choices"][0]["message"]["content"])
except Exception as e:
    print("‚ùå ChatCompletion failed:", e)
    sys.exit(1)
EOF

          # run the test
          python test_openai.py

      - name: Run Python script with Supabase env
        env:
          API_KEY: ${{ secrets.API_KEY }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        run: python pipeline_complete.py
